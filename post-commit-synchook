#!/bin/sh -x
SYNCHOOK_ENV_DIR1=~/.synchook
SYNCHOOK_ENV_DIR2=${PWD}/.synchook
ENV_FILE_PATH=${SYNCHOOK_ENV_DIR1}/.env
CURL_OPTIONS="-k"
WGET_OPTIONS="--no-check-certificate"

if [ ! -d $SYNCHOOK_ENV_DIR1 ]; then
	mkdir $SYNCHOOK_ENV_DIR1
	echo "SYNCHOOK_API_KEY=" >$ENV_FILE_PATH
fi
if [ -d $SYNCHOOK_ENV_DIR2 ]; then
	printf "Using environment directory path ${SYNCHOOK_ENV_DIR2}\n"
	ENV_FILE_PATH=${SYNCHOOK_ENV_DIR2}/.env
fi

SYNCHOOK_API_KEY=$(cat $ENV_FILE_PATH | grep -G "^SYNCHOOK_API_KEY" | grep -v "#" | cut -f2 -d"=")
SYNCHOOK_HOST=$(cat $ENV_FILE_PATH | grep -G "^SYNCHOOK_HOST" | grep -v "#" | cut -f2 -d"=")
FILTERS=$(cat $ENV_FILE_PATH | grep -G "^FILTER=" | grep -v "#" | cut -f2 -d"=")
NDAS=$(cat $ENV_FILE_PATH | grep -G "^NDA=" | grep -v "#" | cut -f2 -d"=")

if [ -z "$SYNCHOOK_HOST" ]; then
	SYNCHOOK_HOST=$SYNCHOOK_HOST
fi
if [ -z "$CURL_OPTIONS" ]; then
	CURL_OPTIONS=$CURL_OPTIONS
fi
if [ -z "$WGET_OPTIONS" ]; then
	WGET_OPTIONS=$WGET_OPTIONS
fi

if [ -z "$SYNCHOOK_API_KEY" -a $(env | grep -c -e "^GIT_") -gt 1 ]; then
	printf "Your SyncHook API Key is missing.\n"
	printf "Please run this $0 from a normal shell to enter your SyncHook API Key, or update $ENV_FILE_PATH.\n"
	printf "Synchook exiting...\n\n"
	exit 1
elif [ -z "$SYNCHOOK_API_KEY" ]; then
	printf "Please enter your SyncHook API Key: "
	read -r SYNCHOOK_API_KEY
	if [ -z "$SYNCHOOK_API_KEY" ]; then
		printf "Go to https://synchook.june07.com to generate a FREE API Key.\n"
		printf "Synchook exiting...\n\n"
		exit 1
	else
		printf "Validating key...\n"
		curlCommand="curl -s ${CURL_OPTIONS} -L -w ' %{response_code}' https://${SYNCHOOK_HOST}/v1/synchook \
            -H 'Content-Type: application/json' \
            -H \"x-api-key: { \\\"apikey\\\": \\\"${SYNCHOOK_API_KEY}\\\" }\"
        "
		if [ -n "$DEBUG" ]; then
			printf "curl command: $curlCommand\n"
		fi
		if [ $(which curl) ]; then
			response=$(eval "$curlCommand")
		else
			response=$(wget -q -O - $WGET_OPTIONS --max-redirect=20 --server-response URL-response https://$SYNCHOOK_HOST/v1/synchook \
				--header='Content-Type: application/json' \
				--header="x-api-key: { \"apikey\": \"${SYNCHOOK_API_KEY}\" }" 2>&1 | egrep "\s200|^\"")
		fi
		if [ -n "$(echo $response | egrep "\s200")" ]; then
			# append the line if "SYNCHOOK_API_KEY=" is missing
            if [ -z "$(cat $ENV_FILE_PATH | grep -G "^SYNCHOOK_API_KEY=")" ]; then
                echo "SYNCHOOK_API_KEY=${SYNCHOOK_API_KEY}" >> "$ENV_FILE_PATH"
            else
                perl -pi -e "s/^SYNCHOOK_API_KEY=.*/SYNCHOOK_API_KEY=${SYNCHOOK_API_KEY}/" "$ENV_FILE_PATH"
            fi
			echo "Saved SYNCHOOK_API_KEY to $ENV_FILE_PATH"
			printf "Synchok is now enabled!\n\n"
			exit 1
		else
			printf "server response: $response\n\n"
			printf "Go to https://synchook.june07.com to verify and/or generate a FREE API Key.\n"
			printf "Synchook exiting...\n\n"
			exit 1
		fi
	fi
	exit 0
fi

git_branch=$(git branch --show-current 2>&1 >/dev/null)
if [ $(echo $git_branch | grep -c "error: unknown option") -ne 0 ]; then
	git_branch=$(git branch --list | grep "*" | cut -f2 -d" ")
fi

git_repo=$(basename "$(git rev-parse --show-toplevel)")
for filter in $FILTERS; do
	match=$(echo $filter | cut -f1 -d":")
	replacement=$(echo $filter | cut -f2 -d":")
	git_repo=$(echo $git_repo | sed s/$match/$replacement/g)
done
base64args="-w0"
if [ $(echo $OSTYPE | egrep "darwin") ]; then
	base64args=""
fi

hostname=$(hostname)
git_url=$(git config remote.origin.url)
git_log=$(git log -1 HEAD | base64 $base64args)
for nda in $NDAS; do
	metadata=$(echo $nda | cut -f1 -d":")
	fakedata=$(echo $nda | cut -f2 -d":")
	nda_safe_metadata="*** redacted ***"
	if [ -n $metadata -a -n $fakedata -a $fakedata != $metadata ]; then
		nda_safe_metadata=$fakedata
	fi
	if [ "$metadata" = "host" ]; then
		hostname=$nda_safe_metadata
	elif [ "$metadata" = "repo" ]; then
		git_repo=$nda_safe_metadata
	elif [ "$metadata" = "branch" ]; then
		git_branch=$nda_safe_metadata
	elif [ "$metadata" = "url" ]; then
		git_url=$nda_safe_metadata
	elif [ "$metadata" = "log" ]; then
		git_log=$(echo "$nda_safe_metadata" | base64 $base64args)
	fi
done

appConfig=$(echo "{
    \"git_user_email\": \"$(cat $ENV_FILE_PATH | egrep "^GIT_USER_EMAIL=" | cut -f2 -d"=" | tr "\n" "," | sed 's/,*$//g')\",
    \"exclude\": \"$(cat $ENV_FILE_PATH | egrep "^EXCLUDE=" | cut -f2 -d"=" | tr "\n" "," | sed 's/,*$//g')\"
}" | jq -cr 'del(..|select(. == ""))' | base64 $base64args)

data=$(echo "{
    \"hostname\": \"$hostname\",
    \"git_repo\": \"$git_repo\",
    \"git_branch\": \"$git_branch\",
    \"git_url\": \"$git_url\",
    \"git_log\": \"$git_log\"
}" | base64 $base64args)
if [ $(which curl) ]; then
	response=$(curl -s -k -L -w ' %{response_code}' https://$SYNCHOOK_HOST/v1/synchook \
		-H 'Content-Type: text/plain' \
		-H "x-api-key: { \"apikey\": \"${SYNCHOOK_API_KEY}\" }" \
		-H "x-app-config: \"${appConfig}\"" \
		-d ${data})
else
	response=$(wget -q -O - $WGET_OPTIONS --max-redirect=20 --server-response URL-response https://$SYNCHOOK_HOST/v1/synchook \
		--header='Content-Type: text/plain' \
		--header="x-api-key: { \"apikey\": \"${SYNCHOOK_API_KEY}\" }" \
		--header="x-app-config: \"${appConfig}\"" \
		--post-data="${data}" 2>&1 | egrep "\s200|^\"")
fi

http_code=$(echo "$response" | awk '{print $NF}')
body=$(echo "$response" | sed 's/ [0-9]\{3\}$//')

if [ "$http_code" != "200" ]; then
  # Try to pretty-print JSON error if jq is available
  if command -v jq >/dev/null 2>&1; then
    if echo "$body" | jq . >/dev/null 2>&1; then
      printf "\nSync failed with HTTP status %s:\n%s\n\n" "$http_code" "$(echo "$body" | jq .)"
    else
      printf "\nSync failed with HTTP status %s (malformed JSON):\n%s\n\n" "$http_code" "$body"
    fi
  else
    printf "\nSync failed with HTTP status %s:\n%s\n\n" "$http_code" "$body"
  fi
  exit 1
fi

printf "Sync succeeded:\n%s\n" "$body"

printf "\nSynchook successfully synced commit!\n\n"
exit 0
